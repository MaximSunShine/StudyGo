package main

import (
	"fmt"
)

func checkColumn(arr [][]byte) bool {

	for i := 0; i < len(arr); i++ {
		help := make(map[byte]int)
		for j := 0; j < len(arr[i]); j++ {
			if arr[i][j] != '.' {
				help[arr[i][j]]++
				if help[arr[i][j]] > 1 {
					return false
				}
			}
		}
	}

	return true
}

func returnArrays(arr [][]byte) ([][]byte, [][]byte) {

	a := make([][]byte, 9)
	b := make([][]byte, 9)
	for i := 0; i < len(arr); i++ {
		a[i] = make([]byte, 9)
		for j := 0; j < len(arr[i]); j++ {
			a[i][j] = arr[j][i]
		}
	}

	k := 0
	for i := 0; i < len(arr); i = i + 3 {
		for j := 0; j < len(arr[i]); j = j + 3 {
			b[k] = make([]byte, 9)
			step := 0
			for n := i; n < i+3; n++ {
				for m := j; m < j+3; m++ {
					b[k][step] = arr[n][m]
					step++
				}
			}
			k++
		}
	}

	return a, b
}

func isValidSudoku(board [][]byte) bool {

	a, b := returnArrays(board)

	return checkColumn(board) && checkColumn(a) && checkColumn(b)
}
func main() {
	fmt.Println(isValidSudoku([][]byte{
		{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}))
	fmt.Println(isValidSudoku([][]byte{
		{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}))
	fmt.Println(isValidSudoku([][]byte{
		{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '1', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}))
	fmt.Println(isValidSudoku([][]byte{
		{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '7', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}))
}
